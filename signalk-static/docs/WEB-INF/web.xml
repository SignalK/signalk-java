<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	id="WebApp_ID" version="2.5">

	<display-name>Capital Preferences APIs</display-name>

	<session-config>
		<session-timeout>360</session-timeout>
	</session-config>

	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:/META-INF/CpPlatformApplicationContext.xml</param-value>
	</context-param>
<!-- listeners -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<listener>
		<listener-class>com.cp.service.timer.ShowdownTimerTask</listener-class>
	</listener>
 <!-- servlets -->
	<servlet>
		<servlet-name>dataAPI</servlet-name>
		<servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>
		<init-param>
			<param-name>javax.ws.rs.Application</param-name>
			<param-value>com.cp.platform.CpPlatformResourceConfig</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<servlet-mapping>
		<servlet-name>dataAPI</servlet-name>
		<url-pattern>/api/*</url-pattern>
	</servlet-mapping>
	<!-- 使用H2控制台的Servlet H2控制台是一个独立的应用程序，包括它自己的Web服务器 -->
	<servlet>
		<servlet-name>H2Console</servlet-name>
		<servlet-class>org.h2.server.web.WebServlet</servlet-class>
		<init-param>
			<param-name>webAllowOthers</param-name>
			<param-value></param-value>
		</init-param>
		<init-param>
			<param-name>trace</param-name>
			<param-value></param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<!-- 映射H2控制台的访问路径 -->
	<servlet-mapping>
		<servlet-name>H2Console</servlet-name>
		<url-pattern>/console/*</url-pattern>
	</servlet-mapping>

	<servlet>
		<servlet-name>ZenDeskSSO</servlet-name>
		<servlet-class>com.cp.platform.ZenDeskSSOServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<!-- 映射H2控制台的访问路径 -->
	<servlet-mapping>
		<servlet-name>ZenDeskSSO</servlet-name>
		<url-pattern>/sso/*</url-pattern>
	</servlet-mapping>

	<servlet>
		<servlet-name>Jersey2Config</servlet-name>
		<servlet-class>com.wordnik.swagger.jersey.config.JerseyJaxrsConfig</servlet-class>
		<init-param>
			<param-name>api.version</param-name>
			<param-value>1.0.0</param-value>
		</init-param>
		<init-param>
			<param-name>swagger.api.basepath</param-name>
			<param-value>/cp24/api</param-value>
		</init-param>
		<init-param>
			<param-name>swagger.filter</param-name>
			<param-value>com.cp.platform.ApiAuthorizationFilterImpl</param-value>
		</init-param>
		<load-on-startup>2</load-on-startup>
	</servlet>
	<!--  filters -->
	<filter>
		<filter-name>ApiOriginFilter</filter-name>
		<filter-class>com.cp.platform.ApiOriginFilter</filter-class>
	</filter>
	
	<filter-mapping>
		<filter-name>ApiOriginFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- filter> 
		<filter-name>openApiFilter</filter-name> 
		<filter-class>com.cp.service.security.container.authc.OpenApiFilter</filter-class> 
	</filter> 
	<filter-mapping> 
		<filter-name>openApiFilter</filter-name> 
		<url-pattern>/api/*</url-pattern> 
	</filter-mapping -->
	<!-- Apply Spring Security Filter to all Requests -->
	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

</web-app>